{"version":3,"sources":["icons/valid.svg","icons/arrow.svg","icons/like.svg","icons/share.svg","icons/repost.svg","icons/comments.svg","components/post.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Post","props","class","src","author","photo","alt","name","valid","nickname","date","arrow","content","image","like","repost","comments","share","App","isValid","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wFAAAA,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,uRC4D5BC,MAjDf,SAAcC,GACZ,OACE,yBAAKC,MAAM,QACP,yBAAMA,MAAM,eACR,yBAAKC,IAAKF,EAAMG,OAAOC,MAAOC,IAAI,iBAEtC,yBAAKJ,MAAM,gBACP,yBAAKA,MAAM,aACP,4BAAKD,EAAMG,OAAOG,MAClB,yBAAKL,MAAM,cACP,yBAAKC,IAAKK,IAAOF,IAAI,aAAaJ,MAAM,WAE5C,yBAAKA,MAAM,oBACP,8BAAOD,EAAMG,OAAOK,SAApB,KACA,wCACA,8BAAOR,EAAMS,OAEjB,yBAAKR,MAAM,cACP,yBAAKC,IAAKQ,IAAOL,IAAI,aAAaJ,MAAM,YAGhD,yBAAKA,MAAM,aACP,2BAAID,EAAMW,UAEd,yBAAKV,MAAM,cACP,yBAAKC,IAAKF,EAAMY,MAAOP,IAAI,gBAE/B,yBAAKJ,MAAM,eACP,yBAAKA,MAAM,eACP,yBAAKC,IAAKW,IAAMR,IAAI,cACpB,sCAEJ,yBAAKJ,MAAM,eACP,yBAAKC,IAAKY,IAAQT,IAAI,gBACtB,sCAEJ,yBAAKJ,MAAM,eACP,yBAAKC,IAAKa,IAAUV,IAAI,kBACxB,sCAEJ,yBAAKJ,MAAM,eACP,yBAAKC,IAAKc,IAAOX,IAAI,oBC7B1BY,MAff,WACE,OACE,kBAAC,EAAD,CAAMd,OAAQ,CACNG,KAAM,mBACNF,MARS,6FASTI,SAAU,cACVU,SAAS,GAEZP,QAAQ,kDACRC,MAXS,gGAYTH,KAAM,kCCNKU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H/B,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0df3ba89.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/valid.2019cadf.svg\";","module.exports = __webpack_public_path__ + \"static/media/arrow.dd81ae47.svg\";","module.exports = __webpack_public_path__ + \"static/media/like.718f8edc.svg\";","module.exports = __webpack_public_path__ + \"static/media/share.abbc6f5a.svg\";","module.exports = __webpack_public_path__ + \"static/media/repost.c4273504.svg\";","module.exports = __webpack_public_path__ + \"static/media/comments.dcae7504.svg\";","import React from 'react';\r\n\r\nimport './reset.css';\r\nimport './post.css';\r\nimport valid from \"../icons/valid.svg\";\r\nimport arrow from \"../icons/arrow.svg\";\r\nimport like from \"../icons/like.svg\";\r\nimport share from \"../icons/share.svg\";\r\nimport repost from \"../icons/repost.svg\";\r\nimport comments from \"../icons/comments.svg\";\r\n\r\nfunction Post(props) {\r\n  return (\r\n    <div class=\"post\">\r\n        <div  class=\"user_avatar\">\r\n            <img src={props.author.photo} alt=\"user avatar\"/>\r\n        </div>\r\n        <div class=\"post_content\">\r\n            <div class=\"user_info\">\r\n                <h3>{props.author.name}</h3> \r\n                <div class=\"valid_icon\">\r\n                    <img src={valid} alt=\"valid icon\" class=\"valid\" />\r\n                </div>\r\n                <div class=\"post_author_info\">\r\n                    <span>{props.author.nickname} </span>\r\n                    <span>&#8226;</span>\r\n                    <span>{props.date}</span>\r\n                </div>\r\n                <div class=\"arrow_icon\">\r\n                    <img src={arrow} alt=\"valid icon\" class=\"valid\" />\r\n                </div>\r\n            </div>\r\n            <div class=\"post_text\">\r\n                <p>{props.content}</p>\r\n            </div>\r\n            <div class=\"post_image\">\r\n                <img src={props.image} alt=\"post image\"/>\r\n            </div>\r\n            <div class=\"action_list\">\r\n                <div class=\"action_item\">\r\n                    <img src={like} alt=\"like icon\"/>\r\n                    <span>482</span>\r\n                </div>\r\n                <div class=\"action_item\">\r\n                    <img src={repost} alt=\"repost icon\"/>\r\n                    <span>146</span>\r\n                </div>\r\n                <div class=\"action_item\">\r\n                    <img src={comments} alt=\"comments icon\"/>\r\n                    <span>882</span>\r\n                </div>\r\n                <div class=\"action_item\">\r\n                    <img src={share} alt=\"share icon\"/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Post;","import React from 'react';\n\nimport Post from './components/post.js'\n\nconst ANAKIN_IMAGE = \"https://upload.wikimedia.org/wikipedia/en/thumb/7/74/Anakin-Jedi.jpg/220px-Anakin-Jedi.jpg\";\n\nconst RAY_IMAGE = \"https://specials-images.forbesimg.com/imageserve/5e63b3c8e1e617000759130e/960x0.jpg?fit=scale\";\n\nfunction App() {\n  return (\n    <Post author={{\n            name: \"Anakin Skywalker\",\n            photo: ANAKIN_IMAGE,\n            nickname: \"@dart_vader\",\n            isValid: true\n         }}\n         content=\"WTF? Who is Ray? Why she is Skywalker? Luke...?\"\n         image={RAY_IMAGE}\n         date={\"26 февр.\"}\n    />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}